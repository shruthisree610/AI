from collections import deque

def water_jug_bfs(jug1, jug2, target):
    visited = set()
    queue = deque()
    # Start with both jugs empty
    queue.append((0, 0))
    while queue:
        a, b = queue.popleft()
        if (a, b) in visited:
            continue
        visited.add((a, b))
        
        print(f"Jug1: {a}, Jug2: {b}")
        
        # Check if target reached
        if a == target or b == target:
            print("\nTarget reached!")
            return True
        # Possible operations
        next_states = [
            (jug1, b),      # Fill Jug1
            (a, jug2),      # Fill Jug2
            (0, b),         # Empty Jug1
            (a, 0),         # Empty Jug2
            # Pour Jug1 → Jug2
            (a - min(a, jug2 - b), b + min(a, jug2 - b)),
            # Pour Jug2 → Jug1
            (a + min(b, jug1 - a), b - min(b, jug1 - a)),
        ]
        
        for state in next_states:
            if state not in visited:
                queue.append(state)
    
    print("\n No solution possible.")
    return False
if __name__ == "__main__":
    jug1, jug2, target = 4, 3, 2  # Example: 4L jug, 3L jug, target=2
    water_jug_bfs(jug1, jug2, target)
